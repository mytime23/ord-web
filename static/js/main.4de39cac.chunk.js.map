{"version":3,"sources":["components/Layout.tsx","components/Home.tsx","Providers.tsx","components/About.tsx","components/Docs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","isOpen","state","react_default","a","createElement","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","src","process","width","height","alt","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","children","Component","Home","components_Layout","PlayContext","React","createContext","PlayProvider","_Component","title","inherits","createClass","key","value","Provider","About","info","Providers_PlayProvider","Alert","About_Info","About_List","Info","_this2","event","_this$context","context","Button","contextType","List","Consumer","Docs","App","BrowserRouter","basename","Switch","Route","exact","path","concat","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4de39cac.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Button\r\n } from 'reactstrap';\r\nimport \"./Styles.css\";\r\n\r\ninterface IComponentState {\r\n  isOpen: boolean,\r\n}\r\n\r\nclass Layout extends Component<{}, IComponentState> {\r\n    constructor(props: {}) {\r\n        super(props);    \r\n        this.state = {\r\n          isOpen: false,\r\n        };\r\n    }\r\n \r\n\r\n    public toggle = () => {\r\n      this.setState({\r\n        isOpen: !this.state.isOpen\r\n      });\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          <Navbar color=\"dark\" dark expand=\"md\">\r\n          <NavbarBrand tag={Link} to=\"/\">\r\n              <img src={process.env.PUBLIC_URL + '/Ocean.png'} width=\"32px\" height=\"32px\" alt=\"Logo\" />{'    '}\r\n              PWA-APP\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink tag={Link} to=\"/home\">首頁</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink tag={Link} to=\"/about\">關於</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink tag={Link} to=\"/docs\">文件</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n            <div className=\"main\">\r\n                {this.props.children}\r\n            </div>\r\n            <div>\r\n              <p className=\"footer text-center\">Copyright ©2019 Tim </p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\n// import { Container, Row, Col, Button } from 'reactstrap';\r\nimport Layout from '../components/Layout';\r\n// import { PlayProvider} from '../Providers';\r\n\r\nclass Home extends Component {\r\n    render(){\r\n        let basename = process.env.PUBLIC_URL;\r\n        return(       \r\n            <Layout>\r\n                <div>\r\n                   <h1>Home</h1>\r\n                   <p>URL : {basename}</p>\r\n                </div>\r\n            </Layout>                \r\n        );\r\n    }\r\n}\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { IpcNetConnectOpts } from 'net';\r\n\r\ninterface IContextState {\r\n    color: string,\r\n    title: string \r\n}\r\n\r\nexport const PlayContext = React.createContext<Partial<IContextState>>({}); // React 16.3 support\r\n\r\nexport class PlayProvider extends Component<{}, IContextState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            color: \"primary\" ,\r\n            title: \"Context\"\r\n        }\r\n    }\r\n    \r\n   \r\n    render() {\r\n        return(\r\n            <PlayContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </PlayContext.Provider>\r\n        )\r\n    }\r\n}\r\n  \r\n","import React, { Component } from 'react';\r\nimport { Button, Alert } from 'reactstrap';\r\nimport Layout from './Layout';\r\nimport {PlayContext, PlayProvider} from '../Providers';\r\nimport \"./Styles.css\";\r\n\r\ninterface IComponentState {\r\n    info: string \r\n}\r\n\r\nclass About extends Component<{}, IComponentState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            info: ''\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            info: 'Hello Context API'\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let { info } = this.state; \r\n        return(\r\n            <PlayProvider>\r\n              <Layout>\r\n                <div>\r\n                   <h1>About</h1>\r\n                   <Alert color=\"success\">{info}</Alert>\r\n                   <Info toggle={this.toggle} />\r\n                   <List />\r\n                </div>\r\n              </Layout>  \r\n            </PlayProvider>             \r\n        );\r\n    }\r\n}\r\n\r\ninterface IInfoProps {\r\n    toggle(event: any): void;\r\n}\r\n\r\nclass Info extends Component<IInfoProps, {}> {\r\n    constructor(props: IInfoProps) {\r\n        super(props)\r\n    }\r\n    static contextType = PlayContext; //React 16.6 support\r\n \r\n    toggle = () => {\r\n        this.props.toggle(event);\r\n    }\r\n    render() {\r\n        let { color, title}  = this.context;\r\n        return(\r\n            <div>\r\n                <h1>PWA APP About Info 2</h1>\r\n                <Button \r\n                  color={color} \r\n                  onClick={this.toggle}>\r\n                  {title}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n }\r\n\r\nclass List extends Component {\r\n    render() {\r\n        return(\r\n            <PlayContext.Consumer>\r\n             { (context) => (\r\n                 <h1>This is Title List {context.title}</h1>\r\n             )}\r\n            </PlayContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\r\n// import { Container, Row, Col, Button } from 'reactstrap';\r\nimport Layout from '../components/Layout';\r\n// import { PlayProvider} from '../Providers';\r\n\r\nclass Docs extends Component {\r\n    render(){\r\n        return(       \r\n            <Layout>\r\n                <div>\r\n                   <h1>Docs</h1>\r\n                </div>\r\n            </Layout>                \r\n        );\r\n    }\r\n}\r\nexport default Docs;\r\n","import React, { Component } from 'react';\nimport { Link,BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Docs from './components/Docs';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home}/>\n        <Route path={`${process.env.PUBLIC_URL}/home`} component={Home}/>      \n        <Route path={`${process.env.PUBLIC_URL}/about`} component={About}/>\n        <Route path={`${process.env.PUBLIC_URL}/docs`} component={Docs}/>\n        {/* <Redirect to=\"/\" /> */}\n      </Switch>\n    </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}